package Jaddle;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
public class Jaddle {
    private static final int MAX_LIVES = 5;
    private static int currentLives = MAX_LIVES;
    
    private static int points = 0;
    private static int levelPoints = 0; // Track points specific to the current level
    private static final int POINTS_PER_CORRECT_ANSWER = 10; 
    private static final int POINTS_DEDUCT_WRONG_ANSWER = 5; // Deduct 5 points for each wrong answer
    private static final int LIFE_REGENERATION_TIME = 10000; // 10 seconds in milliseconds
    
    // Level Points Requirements
    private static final int LEVEL_2_UNLOCK_POINTS = 10;
    private static final int LEVEL_3_UNLOCK_POINTS = 10;
    private static final int LEVEL_4_UNLOCK_POINTS = 10;
    private static final int LEVEL_5_UNLOCK_POINTS = 10;
    private static final int LEVEL_6_UNLOCK_POINTS = 10;
    private static final int LEVEL_7_UNLOCK_POINTS = 10;
    private static final int LEVEL_8_UNLOCK_POINTS = 10;
    private static final int LEVEL_9_UNLOCK_POINTS = 40;
    private static final int LEVEL_10_UNLOCK_POINTS = 40;
    private static int currentLevel = 1; // Track the player's current level
    public static void main(String[] args) {
        ArrayList<Riddle> LVL1 = new ArrayList<>();
        ArrayList<Riddle> LVL2 = new ArrayList<>();
        ArrayList<Riddle> LVL3 = new ArrayList<>();
        ArrayList<Riddle> LVL4 = new ArrayList<>();
        ArrayList<Riddle> LVL5 = new ArrayList<>();
        ArrayList<Riddle> LVL6 = new ArrayList<>();
        ArrayList<Riddle> LVL7 = new ArrayList<>();
        ArrayList<Riddle> LVL8 = new ArrayList<>();
        ArrayList<Riddle> LVL9 = new ArrayList<>();
        ArrayList<Riddle> LVL10 = new ArrayList<>();
        
        // Adding riddles with choices for levels 1 to 5
        LVL1.add(new Riddle("Isang bagay na laging humahaba kapag pinipigil.", "A. Hininga B. Hangin C. Gabi D. Araw", "A"));
        LVL1.add(new Riddle("Laging nauuna ngunit hindi nakikita.", "A. Bagyong dumaan B. Hinaharap C. Alon D. Hangin", "B"));
        LVL2.add(new Riddle("Laging nauuna ngunit hindi nakikita.", "A. Bagyong dumaan B. Hinaharap C. Alon D. Hangin", "B"));
        LVL2.add(new Riddle("Laging nauuna ngunit hindi nakikita.", "A. Mata B. Hangin C. Buwan D. Araw", "B"));
        LVL3.add(new Riddle("Hindi mo makita ngunit kailangan mo sa bawat araw.", "A. Hangin B. Mata C. Hanggang Bato D. Alon", "A"));
        LVL3.add(new Riddle("Hindi mo makita ngunit kailangan mo sa bawat araw.", "A. Bato B. Hangin C. Mata D. Hininga", "B"));
        LVL4.add(new Riddle("Bagay na hindi nauubos kahit ginagamit araw-araw.", "A. Hangin B. Kaalaman C. Buhay D. Lupa", "B"));
        LVL4.add(new Riddle("Bagay na hindi nauubos kahit ginagamit araw-araw.", "A. Kaalaman B. Araw C. Hangin D. Hininga", "A"));
        LVL5.add(new Riddle("Isang prinsesa na laging may korona sa kanyang ulo.", "A. Orange B. Pineapple C. Mangga D. Pera", "B"));
        LVL5.add(new Riddle("Isang prinsesa na laging may korona sa kanyang ulo.", "A. Banana B. Pineapple C. Kasoy D. Buko", "B"));
        
        // Levels 6 to 10 (without choices)
       LVL6.add(new Riddle("Dalawang balon, hindi malingon.", "tenga", "ear", "ears"));

        LVL6.add(new Riddle("Ako ay may kaibigan, kasama ko kahit saan.", "Anino"));
        LVL6.add(new Riddle("Buto't balat, Lumilipad. Ano ako?", "Sarangola"));
        LVL6.add(new Riddle("Isang prinsesa, nakaupo sa tasa.", "Kasoy"));
        LVL6.add(new Riddle("Kung kailan mo pinatay, saka pa humaba ang buhay.", "Kandila"));
        LVL6.add(new Riddle("Hindi tao, hindi hayop, ngunit lumuluha.", "Gripo"));
        LVL7.add(new Riddle("Dalawang balon, hindi malingon.", "Tenga"));
        LVL7.add(new Riddle("Ako ay may kaibigan, kasama ko kahit saan.", "Anino"));
        LVL7.add(new Riddle("Buto't balat, Lumilipad. Ano ako?", "Sarangola"));
        LVL7.add(new Riddle("Isang prinsesa, nakaupo sa tasa.", "Kasoy"));
        LVL7.add(new Riddle("Kung kailan mo pinatay, saka pa humaba ang buhay.", "Kandila"));
        LVL7.add(new Riddle("Hindi tao, hindi hayop, ngunit lumuluha.", "Gripo"));
        LVL8.add(new Riddle("Dalawang balon, hindi malingon.", "Tenga"));
        LVL8.add(new Riddle("Ako ay may kaibigan, kasama ko kahit saan.", "Anino"));
        LVL8.add(new Riddle("Buto't balat, Lumilipad. Ano ako?", "Sarangola"));
        LVL8.add(new Riddle("Isang prinsesa, nakaupo sa tasa.", "Kasoy"));
        LVL8.add(new Riddle("Kung kailan mo pinatay, saka pa humaba ang buhay.", "Kandila"));
        LVL8.add(new Riddle("Hindi tao, hindi hayop, ngunit lumuluha.", "Gripo"));
        LVL9.add(new Riddle("Dalawang balon, hindi malingon.", "Tenga"));
        LVL9.add(new Riddle("Ako ay may kaibigan, kasama ko kahit saan.", "Anino"));
        LVL9.add(new Riddle("Buto't balat, Lumilipad. Ano ako?", "Sarangola"));
        LVL9.add(new Riddle("Isang prinsesa, nakaupo sa tasa.", "Kasoy"));
        LVL9.add(new Riddle("Kung kailan mo pinatay, saka pa humaba ang buhay.", "Kandila"));
        LVL9.add(new Riddle("Hindi tao, hindi hayop, ngunit lumuluha.", "Gripo"));
        LVL10.add(new Riddle("Dalawang balon, hindi malingon.", "Tenga"));
        LVL10.add(new Riddle("Ako ay may kaibigan, kasama ko kahit saan.", "Anino"));
        LVL10.add(new Riddle("Buto't balat, Lumilipad. Ano ako?", "Sarangola"));
        LVL10.add(new Riddle("Isang prinsesa, nakaupo sa tasa.", "Kasoy"));
        LVL10.add(new Riddle("Kung kailan mo pinatay, saka pa humaba ang buhay.", "Kandila"));
        LVL10.add(new Riddle("Hindi tao, hindi hayop, ngunit lumuluha.", "Gripo"));
        // Load progress if available
        loadProgress();
        try (Scanner scan = new Scanner(System.in)) {
            System.out.println("Welcome to Jaddle!");
            System.out.println("Press 's' to begin the game or type 'exit' to quit.");
            String start = scan.nextLine().toLowerCase();
            if (start.equals("s")) {
                while (true) {
                    System.out.println("Current Level: " + currentLevel + ", Total Points: " + points + ", Lives: " + currentLives);
                    System.out.println("Choose an option:");
                    System.out.println("1. Play Level 1");
                    if (currentLevel >= 2) System.out.println("2. Play Level 2");
                    if (currentLevel >= 3) System.out.println("3. Play Level 3");
                    if (currentLevel >= 4) System.out.println("4. Play Level 4");
                    if (currentLevel >= 5) System.out.println("5. Play Level 5");
                    if (currentLevel >= 6) System.out.println("6. Play Level 6");
                    if (currentLevel >= 7) System.out.println("7. Play Level 7");
                    if (currentLevel >= 8) System.out.println("8. Play Level 8");
                    if (currentLevel >= 9) System.out.println("9. Play Level 9");
                    if (currentLevel >= 10) System.out.println("10. Play Level 10");
                    System.out.println("0. Exit");
                    String choice = scan.nextLine();
                    if (choice.equals("1")) {
                        playLevelWithChoices(scan, LVL1, LEVEL_2_UNLOCK_POINTS, 2);
                    } else if (choice.equals("2") && currentLevel >= 2) {
                        playLevelWithChoices(scan, LVL2, LEVEL_3_UNLOCK_POINTS, 3);
                    } else if (choice.equals("3") && currentLevel >= 3) {
                        playLevelWithChoices(scan, LVL3, LEVEL_4_UNLOCK_POINTS, 4);
                    } else if (choice.equals("4") && currentLevel >= 4) {
                        playLevelWithChoices(scan, LVL4, LEVEL_5_UNLOCK_POINTS, 5);
                    } else if (choice.equals("5") && currentLevel >= 5) {
                        playLevelWithChoices(scan, LVL5, LEVEL_5_UNLOCK_POINTS, 6);
                    } else if (choice.equals("6") && currentLevel >= 6) {
                        playLevel(scan, LVL6, LEVEL_6_UNLOCK_POINTS, 7);
                    } else if (choice.equals("7") && currentLevel >= 7) {
                        playLevel(scan, LVL7, LEVEL_7_UNLOCK_POINTS, 8);
                    } else if (choice.equals("8") && currentLevel >= 8) {
                        playLevel(scan, LVL8, LEVEL_8_UNLOCK_POINTS, 9);
                    } else if (choice.equals("9") && currentLevel >= 9) {
                        playLevel(scan, LVL9, LEVEL_9_UNLOCK_POINTS, 10);
                    } else if (choice.equals("10") && currentLevel >= 10) {
                        playLevel(scan, LVL10, LEVEL_10_UNLOCK_POINTS, 11);
                    } else if (choice.equals("0")) {
                        saveProgress();
                        System.out.println("Thanks for playing! Goodbye!");
                        break;
                    } else {
                        System.out.println("Invalid choice. Try again.");
                    }
                }
            } else if (start.equals("exit")) {
                System.out.println("Goodbye!");
            } else {
                System.out.println("Invalid choice.");
            }
        }
    }
  


private static void playLevelWithChoices(Scanner scan, List<Riddle> levelRiddles, int unlockPoints, int nextLevel) {
    // Display the welcome message
    System.out.println("***** WELCOME TO LEVEL " + currentLevel + " *****");
    System.out.println("Lives: " + currentLives + " | Level Points: " + levelPoints);

    for (Riddle riddle : levelRiddles) {
        System.out.println("Riddle: " + riddle.getRiddle());
        
        if (!riddle.getChoices().isEmpty()) {
            System.out.println("Choices: " + riddle.getChoices());
        }
        
        String answer = scan.nextLine().toUpperCase().trim();
        
        if (riddle.isCorrectAnswer(answer)) {
            points += POINTS_PER_CORRECT_ANSWER;
            levelPoints += POINTS_PER_CORRECT_ANSWER;
            System.out.println("Correct! You gained " + POINTS_PER_CORRECT_ANSWER + " points.");
        } else {
            // Deduct 5 points for wrong answer, but ensure points don't go negative
            if (points - POINTS_DEDUCT_WRONG_ANSWER >= 0) {
                points -= POINTS_DEDUCT_WRONG_ANSWER;
            } else {
                points = 0; // Ensure points don't go below 0
            }
            currentLives--;
            System.out.println("Wrong! You lost 5 points and 1 life.");
            if (currentLives == 0) {
                System.out.println("You have no lives left. Waiting for 10 seconds to regenerate lives...");
                try {
                    Thread.sleep(LIFE_REGENERATION_TIME); // Wait for 10 seconds before retrying
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                // Regenerate lives after waiting
                currentLives = 5;
                System.out.println("Lives regenerated! You now have 5 lives.");
                return;
            }
        }
    }
    if (levelPoints >= unlockPoints) {
        currentLevel = nextLevel;
        System.out.println("Level " + nextLevel + " unlocked!");
    }
}

private static void playLevel(Scanner scan, List<Riddle> levelRiddles, int unlockPoints, int nextLevel) {
    // Display the welcome message
    System.out.println("***** WELCOME TO LEVEL " + currentLevel + " *****");
    System.out.println("Lives: " + currentLives + " | Level Points: " + levelPoints);

    for (Riddle riddle : levelRiddles) {
        System.out.println("Riddle: " + riddle.getRiddle());
        
        // For levels with no choices, just get the answer
        String answer = scan.nextLine().toLowerCase().trim();
        
        if (riddle.isCorrectAnswer(answer)) {
            points += POINTS_PER_CORRECT_ANSWER;
            levelPoints += POINTS_PER_CORRECT_ANSWER;
            System.out.println("Correct! You gained " + POINTS_PER_CORRECT_ANSWER + " points.");
        } else {
            // Deduct 5 points for wrong answer, but ensure points don't go negative
            if (points - POINTS_DEDUCT_WRONG_ANSWER >= 0) {
                points -= POINTS_DEDUCT_WRONG_ANSWER;
            } else {
                points = 0; // Ensure points don't go below 0
            }
            currentLives--;
            System.out.println("Wrong! You lost 5 points and 1 life.");
            if (currentLives == 0) {
                System.out.println("You have no lives left. Waiting for 10 seconds to regenerate lives...");
                try {
                    Thread.sleep(LIFE_REGENERATION_TIME); // Wait for 10 seconds before retrying
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
                // Regenerate lives after waiting
                currentLives = 5;
                System.out.println("Lives regenerated! You now have 5 lives.");
                return;
            }
        }
    }
    if (levelPoints >= unlockPoints) {
        currentLevel = nextLevel;
        System.out.println("Level " + nextLevel + " unlocked!");
    }
}



    private static void loadProgress() {
        try (BufferedReader br = new BufferedReader(new FileReader("progress.txt"))) {
            points = Integer.parseInt(br.readLine());
            currentLevel = Integer.parseInt(br.readLine());
            currentLives = Integer.parseInt(br.readLine());
        } catch (IOException e) {
            // No progress file found, start fresh
        }
    }
    private static void saveProgress() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter("progress.txt"))) {
            bw.write(String.valueOf(points));
            bw.newLine();
            bw.write(String.valueOf(currentLevel));
            bw.newLine();
            bw.write(String.valueOf(currentLives));
        } catch (IOException e) {
            System.out.println("Failed to save progress.");
        }
    }
}
class Riddle {
    private final String riddle;
    private final List<String> answers; // Multiple answers for levels 6 and beyond
    private final String choices; // Choices for levels 1 to 5
    private final String correctAnswer; // Single correct answer for levels 1 to 5

    // Constructor for levels 1 to 5 (single correct answer with choices)
    public Riddle(String riddle, String choices, String correctAnswer) {
        this.riddle = riddle;
        this.choices = choices;
        this.correctAnswer = correctAnswer;
        this.answers = new ArrayList<>();
    }

    // Constructor for levels 6 and beyond (multiple answers without choices)
    public Riddle(String riddle, String... answers) {
        this.riddle = riddle;
        this.answers = List.of(answers);  // Store multiple possible correct answers
        this.choices = "";  // No choices for these levels
        this.correctAnswer = "";  // Not needed for these levels, as we use multiple answers
    }

    public String getRiddle() {
        return riddle;
    }

    public List<String> getAnswers() {
        return answers;
    }

    public String getChoices() {
        return choices;
    }

    public boolean isCorrectAnswer(String answer) {
        return answers.contains(answer.toLowerCase());
    }
}
